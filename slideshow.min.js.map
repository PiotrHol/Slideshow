{"version":3,"file":"slideshow.min.js","mappings":"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","sources":["webpack://slideshow/./src/slideshow.ts"],"sourcesContent":["const slideshowHiddenClass = \"slideshow-hidden\";\nconst slideshowContainerClass = \"slideshow-container\";\nconst slideshowBoxClass = \"slideshow-box\";\nconst slideshowLeftArrowClass = \"slideshow-left-arrow\";\nconst slideshowRightArrowClass = \"slideshow-right-arrow\";\nconst slideshowDotsClass = \"slideshow-dots\";\nconst activeDotsClass = \"active-dot\";\n\ntype slideshowElement = {\n  element: HTMLElement;\n  height: number;\n  width: number;\n};\n\ninterface Slideshow {\n  init: () => void;\n  reloadMaxHeightAndWidths: () => void;\n  checkSlide: (a: number) => void;\n  setSlide: (a: number) => void;\n  toggleArrow: () => void;\n  toggleDots: () => void;\n  autoplay: (a: number) => void;\n  touchStartEventHandler: (e: TouchEvent) => void;\n  touchEndEventHandler: (e: TouchEvent) => void;\n}\n\nclass SlideshowSlider implements Slideshow {\n  private slideshowNode: HTMLElement;\n  private isInit: boolean;\n  private slideshowElements: slideshowElement[];\n  private maxHeight: number;\n  private currentSlide: number;\n  private slideshowDiv: HTMLElement;\n  private isAutoplay: boolean;\n  private isInfinity: boolean;\n  private multipleElements: number;\n  private multipleElementsMobile: number;\n  private touchCoordinatesX: number;\n  private isArrowNavigation: boolean;\n\n  constructor(slideshowNode: HTMLElement) {\n    this.slideshowNode = slideshowNode;\n    this.isInit = false;\n    this.slideshowElements = [];\n    this.maxHeight = 0;\n    this.currentSlide = 0;\n    this.slideshowDiv = document.createElement(\"div\");\n    this.slideshowDiv.classList.add(slideshowBoxClass);\n    this.isAutoplay = false;\n    this.isInfinity = false;\n    this.multipleElements = 1;\n    this.multipleElementsMobile = 1;\n    this.touchCoordinatesX = 0;\n    this.isArrowNavigation = true;\n  }\n\n  init() {\n    if (!this.isInit) {\n      this.isInit = true;\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        if (this.slideshowNode.dataset.maxWidth) {\n          this.slideshowNode.style.maxWidth = `${Number(\n            this.slideshowNode.dataset.maxWidth\n          )}px`;\n        }\n\n        if (\n          this.slideshowNode.dataset.multipleElements &&\n          !Number.isNaN(Number(this.slideshowNode.dataset.multipleElements))\n        ) {\n          this.multipleElements = Number(\n            this.slideshowNode.dataset.multipleElements\n          );\n        }\n\n        if (\n          this.slideshowNode.dataset.multipleElementsMobile &&\n          !Number.isNaN(\n            Number(this.slideshowNode.dataset.multipleElementsMobile)\n          )\n        ) {\n          this.multipleElementsMobile = Number(\n            this.slideshowNode.dataset.multipleElementsMobile\n          );\n        }\n\n        if (\n          this.slideshowNode.dataset.dotsNav &&\n          this.slideshowNode.dataset.dotsNav === \"true\"\n        ) {\n          this.isArrowNavigation = false;\n        }\n\n        if (\n          this.slideshowNode.dataset.infinity &&\n          this.slideshowNode.dataset.infinity === \"true\"\n        ) {\n          this.isInfinity = true;\n        }\n\n        if (\n          this.slideshowNode.dataset.autoplay &&\n          this.slideshowNode.dataset.autoplay === \"true\"\n        ) {\n          this.isAutoplay = true;\n        }\n\n        let intervalTime = 0;\n        if (this.slideshowNode.dataset.interval) {\n          intervalTime = Number(this.slideshowNode.dataset.interval);\n        }\n\n        const slideshowChildren = Array.from(\n          this.slideshowNode.children\n        ) as HTMLElement[];\n\n        const calcMultipleElements =\n          window.innerWidth > 768\n            ? this.multipleElements\n            : this.multipleElementsMobile;\n\n        if (this.multipleElements > 1 || this.multipleElementsMobile > 1) {\n          slideshowChildren.forEach(\n            (slide) =>\n              (slide.style.width = `calc(100% / ${calcMultipleElements})`)\n          );\n        }\n\n        for (const slideshowChild of slideshowChildren) {\n          const slideshowChildData = {\n            element: slideshowChild,\n            height: slideshowChild.offsetHeight,\n            width: slideshowChild.offsetWidth,\n          };\n          this.slideshowElements.push(slideshowChildData);\n          if (slideshowChildData.height > this.maxHeight) {\n            this.maxHeight = slideshowChildData.height;\n          }\n          this.slideshowDiv.appendChild(slideshowChild);\n        }\n\n        this.slideshowNode.appendChild(this.slideshowDiv);\n\n        if (this.maxHeight && this.maxHeight > 0) {\n          this.slideshowDiv.style.height = `${this.maxHeight}px`;\n        }\n\n        if (this.isArrowNavigation) {\n          const leftArrow = document.createElement(\"div\");\n          leftArrow.classList.add(\n            slideshowLeftArrowClass,\n            `${slideshowLeftArrowClass}-js`\n          );\n          if (leftArrow) {\n            leftArrow.addEventListener(\"click\", () =>\n              this.setSlide(this.currentSlide - 1)\n            );\n          }\n          this.slideshowNode.appendChild(leftArrow);\n          const rightArrow = document.createElement(\"div\");\n          rightArrow.classList.add(\n            slideshowRightArrowClass,\n            `${slideshowRightArrowClass}-js`\n          );\n          if (rightArrow) {\n            rightArrow.addEventListener(\"click\", () =>\n              this.setSlide(this.currentSlide + 1)\n            );\n          }\n          this.slideshowNode.appendChild(rightArrow);\n          this.toggleArrow();\n        } else {\n          const dotsBox = document.createElement(\"div\");\n          dotsBox.classList.add(slideshowDotsClass, `${slideshowDotsClass}-js`);\n          for (let i = 0; i < this.slideshowElements.length; i++) {\n            const dotDiv = document.createElement(\"div\");\n            dotDiv.addEventListener(\"click\", () => this.setSlide(i));\n            dotsBox.appendChild(dotDiv);\n          }\n          this.slideshowNode.appendChild(dotsBox);\n          this.toggleDots();\n        }\n\n        if (this.isAutoplay) {\n          if (!Number.isNaN(intervalTime) && intervalTime > 0) {\n            this.autoplay(intervalTime);\n          } else {\n            this.autoplay();\n          }\n        }\n\n        this.slideshowNode.addEventListener(\n          \"touchstart\",\n          this.touchStartEventHandler\n        );\n        this.slideshowNode.addEventListener(\n          \"touchend\",\n          this.touchEndEventHandler\n        );\n      });\n\n      window.addEventListener(\"resize\", () => this.reloadMaxHeightAndWidths());\n      window.addEventListener(\"orientationchange\", () =>\n        this.reloadMaxHeightAndWidths()\n      );\n    }\n  }\n\n  reloadMaxHeightAndWidths() {\n    let tempMaxHeight = 0;\n    const calcMultipleElements =\n      window.innerWidth > 768\n        ? this.multipleElements\n        : this.multipleElementsMobile;\n    for (const slideshowChild of this.slideshowElements) {\n      if (this.multipleElements > 1 || this.multipleElementsMobile > 1) {\n        slideshowChild.element.style.width = `calc(100% / ${calcMultipleElements})`;\n      }\n      if (slideshowChild.element.offsetHeight > tempMaxHeight) {\n        tempMaxHeight = slideshowChild.element.offsetHeight;\n      }\n    }\n    this.maxHeight = tempMaxHeight;\n    this.slideshowDiv.style.height = `${this.maxHeight}px`;\n    for (const slideElement of this.slideshowElements) {\n      slideElement.height = slideElement.element.offsetHeight;\n      slideElement.width = slideElement.element.offsetWidth;\n    }\n    this.setSlide(this.currentSlide);\n    if (!this.isArrowNavigation) {\n      this.toggleDots();\n    }\n  }\n\n  checkSlide(slideNumber: number) {\n    if (\n      slideNumber > this.currentSlide &&\n      slideNumber < this.slideshowElements.length\n    ) {\n      return true;\n    }\n    if (slideNumber <= this.currentSlide && slideNumber >= 0) {\n      return true;\n    }\n    return false;\n  }\n\n  setSlide(slideNumber: number) {\n    let newTranslateValue = 0;\n    if (!this.checkSlide(slideNumber) && !this.isInfinity) {\n      return;\n    }\n    let endNumberCondition = this.slideshowElements.length;\n    const conditionMultipleElements =\n      window.innerWidth > 768\n        ? this.multipleElements\n        : this.multipleElementsMobile;\n    if (this.multipleElements > 1 || this.multipleElementsMobile > 1) {\n      endNumberCondition = endNumberCondition - conditionMultipleElements + 1;\n    }\n    if (this.isInfinity && slideNumber >= endNumberCondition) {\n      this.currentSlide = 0;\n    } else if (this.isInfinity && slideNumber < 0) {\n      this.currentSlide = endNumberCondition - 1;\n    } else {\n      this.currentSlide = slideNumber;\n    }\n    for (let i = 0; i < this.slideshowElements.length; i++) {\n      if (i < this.currentSlide) {\n        newTranslateValue += this.slideshowElements[i].width;\n      }\n    }\n    this.slideshowDiv.style.transform = `translateX(-${newTranslateValue}px)`;\n    if (this.isArrowNavigation) {\n      this.toggleArrow();\n    } else {\n      this.toggleDots();\n    }\n  }\n\n  toggleArrow() {\n    const leftArrowElement = this.slideshowNode.querySelector(\n      `.${slideshowLeftArrowClass}-js`\n    );\n    const rightArrowElement = this.slideshowNode.querySelector(\n      `.${slideshowRightArrowClass}-js`\n    );\n    if (leftArrowElement && rightArrowElement) {\n      if (this.currentSlide === 0 && !this.isInfinity) {\n        leftArrowElement.classList.add(slideshowHiddenClass);\n        rightArrowElement.classList.remove(slideshowHiddenClass);\n        return;\n      }\n      if (\n        this.currentSlide === this.slideshowElements.length - 1 &&\n        !this.isInfinity\n      ) {\n        leftArrowElement.classList.remove(slideshowHiddenClass);\n        rightArrowElement.classList.add(slideshowHiddenClass);\n        return;\n      }\n      leftArrowElement.classList.remove(slideshowHiddenClass);\n      rightArrowElement.classList.remove(slideshowHiddenClass);\n    }\n  }\n\n  toggleDots() {\n    const dotElements = this.slideshowNode.querySelector(\n      `.${slideshowDotsClass}-js`\n    )?.children;\n    if (dotElements) {\n      for (let i = 0; i < dotElements.length; i++) {\n        if (this.currentSlide === i) {\n          if (!dotElements[i].classList.contains(activeDotsClass)) {\n            dotElements[i].classList.add(activeDotsClass);\n          }\n          continue;\n        }\n        dotElements[i].classList.remove(activeDotsClass);\n      }\n    }\n  }\n\n  autoplay(time: number = 5000) {\n    const intervalId = setInterval(() => {\n      this.setSlide(this.currentSlide + 1);\n      if (\n        !this.isInfinity &&\n        this.currentSlide === this.slideshowElements.length - 1\n      ) {\n        clearInterval(intervalId);\n      }\n    }, time);\n  }\n\n  touchStartEventHandler = (event: TouchEvent) => {\n    this.touchCoordinatesX = event.changedTouches[0].clientX;\n  };\n\n  touchEndEventHandler = (event: TouchEvent) => {\n    const touchEndCoordinatesX = event.changedTouches[0].clientX;\n    if (touchEndCoordinatesX > this.touchCoordinatesX + 60) {\n      this.setSlide(this.currentSlide - 1);\n    } else if (touchEndCoordinatesX + 60 < this.touchCoordinatesX) {\n      this.setSlide(this.currentSlide + 1);\n    }\n  };\n}\n\nconst nodeSlideshowsContainers: NodeListOf<HTMLElement> =\n  document.querySelectorAll(`.${slideshowContainerClass}`);\n\nconst slideshowsContainers: SlideshowSlider[] = [];\n\nfor (let i = 0; i < nodeSlideshowsContainers.length; i++) {\n  slideshowsContainers.push(new SlideshowSlider(nodeSlideshowsContainers[i]));\n  slideshowsContainers[slideshowsContainers.length - 1].init();\n}\n"],"names":["slideshowHiddenClass","slideshowLeftArrowClass","slideshowRightArrowClass","slideshowDotsClass","activeDotsClass","slideshowNode","touchStartEventHandler","event","touchCoordinatesX","changedTouches","clientX","touchEndEventHandler","touchEndCoordinatesX","setSlide","currentSlide","this","isInit","slideshowElements","maxHeight","slideshowDiv","document","createElement","classList","add","isAutoplay","isInfinity","multipleElements","multipleElementsMobile","isArrowNavigation","init","addEventListener","dataset","maxWidth","style","Number","isNaN","dotsNav","infinity","autoplay","intervalTime","interval","slideshowChildren","Array","from","children","calcMultipleElements","window","innerWidth","forEach","slide","width","slideshowChild","slideshowChildData","element","height","offsetHeight","offsetWidth","push","appendChild","leftArrow","rightArrow","toggleArrow","dotsBox","i","dotDiv","length","toggleDots","reloadMaxHeightAndWidths","tempMaxHeight","slideElement","checkSlide","slideNumber","newTranslateValue","endNumberCondition","conditionMultipleElements","transform","leftArrowElement","querySelector","rightArrowElement","remove","dotElements","contains","time","intervalId","setInterval","clearInterval","nodeSlideshowsContainers","querySelectorAll","slideshowsContainers","SlideshowSlider"],"sourceRoot":""}